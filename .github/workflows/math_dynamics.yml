name: Fetch Mandelbrot Image
permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * *'  # This will run the workflow every day at midnight UTC
  workflow_dispatch: # Allows the workflow to be run manually

jobs:
  fetch_and_commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Ensure you have the token to push changes
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Create and switch to new branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout main
          git pull origin main
          git checkout -b update-mandelbrot-$(date -u +"%Y%m%d")

      - name: Fetch Mandelbrot Image
        env:
          MATH_DYNAMIC_API_KEY: ${{ secrets.MATH_DYNAMIC_API_KEY }}
        run: |
          python - <<EOF
          import requests
          from datetime import datetime
          import os

          url = 'https://math-dynamics.0cta1.com/mandelbrot?width=200&height=200&max_iterations=400&colour=magma&explanation=true'
          headers = {
              'accept': 'application/json',
              'Authorization': f'Bearer {os.getenv("MATH_DYNAMIC_API_KEY")}',
          }

          response = requests.get(url, headers=headers)

          if response.status_code == 200:
              now = datetime.utcnow().strftime('%Y%m%d')
              file_path = f'resources/math_dynamic_{now}.gif'
              try:
                  with open(file_path, 'wb') as file:
                      file.write(response.content)
                  print(f"Image saved to {file_path}")
              except Exception as e:
                  print(f"Error saving image: {e}")
                  raise
          else:
              print(f"Response Code: {response.status_code}")
              print(f"Response Headers: {response.headers}")
              print(f"Response Text: {response.text}")
              raise Exception(f"Failed to retrieve image: {response.status_code}")
          EOF

      - name: List directory contents
        run: ls -R

      - name: Update README with latest image
        run: |
          now=$(date -u +"%Y%m%d")
          sed -i "s|!\[Mandelbrot Image\](resources/math_dynamic_.*.gif)|![Mandelbrot Image](resources/math_dynamic_${now}.gif)|" README.md

      - name: Commit changes
        run: |
          git add -A
          git commit -m "Update Mandelbrot image on $(date -u +"%Y-%m-%d")" || echo "No changes to commit"
          git push origin update-mandelbrot-$(date -u +"%Y%m%d")

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update Mandelbrot image on $(date -u +"%Y-%m-%d")"
          branch: update-mandelbrot-$(date -u +"%Y%m%d")
          base: main
          title: "Update Mandelbrot image on $(date -u +"%Y-%m-%d")"
          body: "Automated update of the Mandelbrot image."

      - name: Merge Pull Request
        if: steps.create_pr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `update-mandelbrot-${new Date().toISOString().slice(0,10)}`
            });
            if (pr.data.length > 0) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.data[0].number,
                merge_method: 'squash'
              });
            }
