name: Fetch Mandelbrot Image

on:
  schedule:
    - cron: '0 0 * * *'  # This will run the workflow every day at midnight UTC
  workflow_dispatch: # Allows the workflow to be run manually

jobs:
  fetch_and_commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main  # Ensure you are on the main branch

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Fetch Mandelbrot Image
        env:
          MATH_DYNAMIC_API_KEY: ${{ secrets.MATH_DYNAMIC_API_KEY }}
        run: |
          python - <<EOF
          import requests
          from datetime import datetime
          import os
          import time

          width = 300
          height = 300
          max_iterations = 400
          colour = 'magma'
          explanation = True

          url = f'https://math-dynamics.0cta1.com/mandelbrot?width={width}&height={height}&max_iterations={max_iterations}&colour={colour}&explanation={str(explanation).lower()}'
          headers = {
              'accept': 'application/json',
              'Authorization': f'Bearer {os.getenv("MATH_DYNAMIC_API_KEY")}',
          }

          now = datetime.utcnow().strftime('%Y%m%d')
          # TODO Alter this so the pattern name is returned by the random endpoint
          file_name = f'mandelbrot_iter_{width}_{height}_{max_iterations}_{colour}_{str(explanation).lower()}.gif'
          file_path = f'resources/{file_name}'
          def fetch_image():
              response = requests.get(url, headers=headers)
              if response.status_code == 200:
                  try:
                      with open(file_path, 'wb') as file:
                          file.write(response.content)
                      print(f"Image saved to {file_path}")
                      return True
                  except Exception as e:
                      print(f"Error saving image: {e}")
                      return False
              else:
                  print(f"Response Code: {response.status_code}")
                  print(f"Response Headers: {response.headers}")
                  print(f"Response Text: {response.text}")
                  return False

          if os.path.exists(file_path):
              print(f"File already exists: {file_path}")
          else:
              success = False
              for attempt in range(2):
                  try:
                      success = fetch_image()
                      if success:
                          break
                  except Exception as e:
                      print(f"Attempt {attempt + 1} failed: {e}")
                      if attempt < 1:
                          print("Retrying in 30 seconds...")
                          time.sleep(30)
              
              if not success:
                  raise Exception("Both attempts to fetch the image have failed.")
                  
          with open('env_vars.sh', 'w') as f:
            f.write(f'export FILE_NAME={file_name}\n')
          EOF



      - name: List directory contents
        run: ls -R

      - name: Update README with latest image
        run: |
          source env_vars.sh
          new_image="resources/${FILE_NAME}"
          sed -i "s|!\[math Dynamics Cool Math\](resources/[^ ]*.gif)|![math Dynamics Cool Math](${new_image})|" README.md


      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update Mandelbrot image on $(date -u +"%Y-%m-%d")"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
